// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"4clabs-server/app/4clabs-server/internal/adapter/data/model"
)

func newTicketWl(db *gorm.DB) ticketWl {
	_ticketWl := ticketWl{}

	_ticketWl.ticketWlDo.UseDB(db)
	_ticketWl.ticketWlDo.UseModel(&model.TicketWl{})

	tableName := _ticketWl.ticketWlDo.TableName()
	_ticketWl.ALL = field.NewField(tableName, "*")
	_ticketWl.ID = field.NewInt32(tableName, "id")
	_ticketWl.Address = field.NewString(tableName, "address")
	_ticketWl.Level = field.NewInt32(tableName, "level")
	_ticketWl.CreatedAt = field.NewTime(tableName, "created_at")
	_ticketWl.UpdatedAt = field.NewTime(tableName, "updated_at")

	_ticketWl.fillFieldMap()

	return _ticketWl
}

type ticketWl struct {
	ticketWlDo ticketWlDo

	ALL       field.Field
	ID        field.Int32
	Address   field.String
	Level     field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (t ticketWl) Table(newTableName string) *ticketWl {
	t.ticketWlDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t ticketWl) As(alias string) *ticketWl {
	t.ticketWlDo.DO = *(t.ticketWlDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *ticketWl) updateTableName(table string) *ticketWl {
	t.ALL = field.NewField(table, "*")
	t.ID = field.NewInt32(table, "id")
	t.Address = field.NewString(table, "address")
	t.Level = field.NewInt32(table, "level")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *ticketWl) WithContext(ctx context.Context) *ticketWlDo { return t.ticketWlDo.WithContext(ctx) }

func (t ticketWl) TableName() string { return t.ticketWlDo.TableName() }

func (t ticketWl) Alias() string { return t.ticketWlDo.Alias() }

func (t *ticketWl) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *ticketWl) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["id"] = t.ID
	t.fieldMap["address"] = t.Address
	t.fieldMap["level"] = t.Level
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t ticketWl) clone(db *gorm.DB) ticketWl {
	t.ticketWlDo.ReplaceDB(db)
	return t
}

type ticketWlDo struct{ gen.DO }

func (t ticketWlDo) Debug() *ticketWlDo {
	return t.withDO(t.DO.Debug())
}

func (t ticketWlDo) WithContext(ctx context.Context) *ticketWlDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t ticketWlDo) ReadDB(ctx context.Context) *ticketWlDo {
	return t.WithContext(ctx).Clauses(dbresolver.Read)
}

func (t ticketWlDo) WriteDB(ctx context.Context) *ticketWlDo {
	return t.WithContext(ctx).Clauses(dbresolver.Write)
}

func (t ticketWlDo) Clauses(conds ...clause.Expression) *ticketWlDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t ticketWlDo) Returning(value interface{}, columns ...string) *ticketWlDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t ticketWlDo) Not(conds ...gen.Condition) *ticketWlDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t ticketWlDo) Or(conds ...gen.Condition) *ticketWlDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t ticketWlDo) Select(conds ...field.Expr) *ticketWlDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t ticketWlDo) Where(conds ...gen.Condition) *ticketWlDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t ticketWlDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *ticketWlDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t ticketWlDo) Order(conds ...field.Expr) *ticketWlDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t ticketWlDo) Distinct(cols ...field.Expr) *ticketWlDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t ticketWlDo) Omit(cols ...field.Expr) *ticketWlDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t ticketWlDo) Join(table schema.Tabler, on ...field.Expr) *ticketWlDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t ticketWlDo) LeftJoin(table schema.Tabler, on ...field.Expr) *ticketWlDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t ticketWlDo) RightJoin(table schema.Tabler, on ...field.Expr) *ticketWlDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t ticketWlDo) Group(cols ...field.Expr) *ticketWlDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t ticketWlDo) Having(conds ...gen.Condition) *ticketWlDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t ticketWlDo) Limit(limit int) *ticketWlDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t ticketWlDo) Offset(offset int) *ticketWlDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t ticketWlDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *ticketWlDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t ticketWlDo) Unscoped() *ticketWlDo {
	return t.withDO(t.DO.Unscoped())
}

func (t ticketWlDo) Create(values ...*model.TicketWl) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t ticketWlDo) CreateInBatches(values []*model.TicketWl, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t ticketWlDo) Save(values ...*model.TicketWl) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t ticketWlDo) First() (*model.TicketWl, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketWl), nil
	}
}

func (t ticketWlDo) Take() (*model.TicketWl, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketWl), nil
	}
}

func (t ticketWlDo) Last() (*model.TicketWl, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketWl), nil
	}
}

func (t ticketWlDo) Find() ([]*model.TicketWl, error) {
	result, err := t.DO.Find()
	return result.([]*model.TicketWl), err
}

func (t ticketWlDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TicketWl, err error) {
	buf := make([]*model.TicketWl, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t ticketWlDo) FindInBatches(result *[]*model.TicketWl, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t ticketWlDo) Attrs(attrs ...field.AssignExpr) *ticketWlDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t ticketWlDo) Assign(attrs ...field.AssignExpr) *ticketWlDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t ticketWlDo) Joins(fields ...field.RelationField) *ticketWlDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t ticketWlDo) Preload(fields ...field.RelationField) *ticketWlDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t ticketWlDo) FirstOrInit() (*model.TicketWl, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketWl), nil
	}
}

func (t ticketWlDo) FirstOrCreate() (*model.TicketWl, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TicketWl), nil
	}
}

func (t ticketWlDo) FindByPage(offset int, limit int) (result []*model.TicketWl, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t ticketWlDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *ticketWlDo) withDO(do gen.Dao) *ticketWlDo {
	t.DO = *do.(*gen.DO)
	return t
}
