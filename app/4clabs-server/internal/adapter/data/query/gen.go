// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		Comic:       newComic(db),
		ComicsNft:   newComicsNft(db),
		Nft:         newNft(db),
		RegisterNft: newRegisterNft(db),
		TicketWl:    newTicketWl(db),
		User:        newUser(db),
	}
}

type Query struct {
	db *gorm.DB

	Comic       comic
	ComicsNft   comicsNft
	Nft         nft
	RegisterNft registerNft
	TicketWl    ticketWl
	User        user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		Comic:       q.Comic.clone(db),
		ComicsNft:   q.ComicsNft.clone(db),
		Nft:         q.Nft.clone(db),
		RegisterNft: q.RegisterNft.clone(db),
		TicketWl:    q.TicketWl.clone(db),
		User:        q.User.clone(db),
	}
}

type queryCtx struct {
	Comic       comicDo
	ComicsNft   comicsNftDo
	Nft         nftDo
	RegisterNft registerNftDo
	TicketWl    ticketWlDo
	User        userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Comic:       *q.Comic.WithContext(ctx),
		ComicsNft:   *q.ComicsNft.WithContext(ctx),
		Nft:         *q.Nft.WithContext(ctx),
		RegisterNft: *q.RegisterNft.WithContext(ctx),
		TicketWl:    *q.TicketWl.WithContext(ctx),
		User:        *q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
