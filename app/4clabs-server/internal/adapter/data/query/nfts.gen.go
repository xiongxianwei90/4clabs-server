// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"4clabs-server/app/4clabs-server/internal/adapter/data/model"
)

func newNft(db *gorm.DB) nft {
	_nft := nft{}

	_nft.nftDo.UseDB(db)
	_nft.nftDo.UseModel(&model.Nft{})

	tableName := _nft.nftDo.TableName()
	_nft.ALL = field.NewField(tableName, "*")
	_nft.ID = field.NewInt32(tableName, "id")
	_nft.ContractAddressTokenID = field.NewString(tableName, "contract_address_token_id")
	_nft.Image = field.NewString(tableName, "image")
	_nft.CreatedAt = field.NewTime(tableName, "created_at")
	_nft.UpdatedAt = field.NewTime(tableName, "updated_at")

	_nft.fillFieldMap()

	return _nft
}

type nft struct {
	nftDo nftDo

	ALL                    field.Field
	ID                     field.Int32
	ContractAddressTokenID field.String
	Image                  field.String
	CreatedAt              field.Time
	UpdatedAt              field.Time

	fieldMap map[string]field.Expr
}

func (n nft) Table(newTableName string) *nft {
	n.nftDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nft) As(alias string) *nft {
	n.nftDo.DO = *(n.nftDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nft) updateTableName(table string) *nft {
	n.ALL = field.NewField(table, "*")
	n.ID = field.NewInt32(table, "id")
	n.ContractAddressTokenID = field.NewString(table, "contract_address_token_id")
	n.Image = field.NewString(table, "image")
	n.CreatedAt = field.NewTime(table, "created_at")
	n.UpdatedAt = field.NewTime(table, "updated_at")

	n.fillFieldMap()

	return n
}

func (n *nft) WithContext(ctx context.Context) *nftDo { return n.nftDo.WithContext(ctx) }

func (n nft) TableName() string { return n.nftDo.TableName() }

func (n nft) Alias() string { return n.nftDo.Alias() }

func (n *nft) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nft) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 5)
	n.fieldMap["id"] = n.ID
	n.fieldMap["contract_address_token_id"] = n.ContractAddressTokenID
	n.fieldMap["image"] = n.Image
	n.fieldMap["created_at"] = n.CreatedAt
	n.fieldMap["updated_at"] = n.UpdatedAt
}

func (n nft) clone(db *gorm.DB) nft {
	n.nftDo.ReplaceDB(db)
	return n
}

type nftDo struct{ gen.DO }

func (n nftDo) Debug() *nftDo {
	return n.withDO(n.DO.Debug())
}

func (n nftDo) WithContext(ctx context.Context) *nftDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nftDo) ReadDB(ctx context.Context) *nftDo {
	return n.WithContext(ctx).Clauses(dbresolver.Read)
}

func (n nftDo) WriteDB(ctx context.Context) *nftDo {
	return n.WithContext(ctx).Clauses(dbresolver.Write)
}

func (n nftDo) Clauses(conds ...clause.Expression) *nftDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nftDo) Returning(value interface{}, columns ...string) *nftDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nftDo) Not(conds ...gen.Condition) *nftDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nftDo) Or(conds ...gen.Condition) *nftDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nftDo) Select(conds ...field.Expr) *nftDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nftDo) Where(conds ...gen.Condition) *nftDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nftDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *nftDo {
	return n.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (n nftDo) Order(conds ...field.Expr) *nftDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nftDo) Distinct(cols ...field.Expr) *nftDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nftDo) Omit(cols ...field.Expr) *nftDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nftDo) Join(table schema.Tabler, on ...field.Expr) *nftDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nftDo) LeftJoin(table schema.Tabler, on ...field.Expr) *nftDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nftDo) RightJoin(table schema.Tabler, on ...field.Expr) *nftDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nftDo) Group(cols ...field.Expr) *nftDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nftDo) Having(conds ...gen.Condition) *nftDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nftDo) Limit(limit int) *nftDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nftDo) Offset(offset int) *nftDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nftDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *nftDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nftDo) Unscoped() *nftDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nftDo) Create(values ...*model.Nft) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nftDo) CreateInBatches(values []*model.Nft, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nftDo) Save(values ...*model.Nft) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nftDo) First() (*model.Nft, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Nft), nil
	}
}

func (n nftDo) Take() (*model.Nft, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Nft), nil
	}
}

func (n nftDo) Last() (*model.Nft, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Nft), nil
	}
}

func (n nftDo) Find() ([]*model.Nft, error) {
	result, err := n.DO.Find()
	return result.([]*model.Nft), err
}

func (n nftDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Nft, err error) {
	buf := make([]*model.Nft, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nftDo) FindInBatches(result *[]*model.Nft, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nftDo) Attrs(attrs ...field.AssignExpr) *nftDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nftDo) Assign(attrs ...field.AssignExpr) *nftDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nftDo) Joins(fields ...field.RelationField) *nftDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nftDo) Preload(fields ...field.RelationField) *nftDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nftDo) FirstOrInit() (*model.Nft, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Nft), nil
	}
}

func (n nftDo) FirstOrCreate() (*model.Nft, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Nft), nil
	}
}

func (n nftDo) FindByPage(offset int, limit int) (result []*model.Nft, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nftDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n *nftDo) withDO(do gen.Dao) *nftDo {
	n.DO = *do.(*gen.DO)
	return n
}
