// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/auth/v1/auth.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FetchSignMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchSignMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchSignMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchSignMessageRequestMultiError, or nil if none found.
func (m *FetchSignMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchSignMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAddress()) != 42 {
		err := FetchSignMessageRequestValidationError{
			field:  "Address",
			reason: "value length must be 42 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return FetchSignMessageRequestMultiError(errors)
	}
	return nil
}

// FetchSignMessageRequestMultiError is an error wrapping multiple validation
// errors returned by FetchSignMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type FetchSignMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchSignMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchSignMessageRequestMultiError) AllErrors() []error { return m }

// FetchSignMessageRequestValidationError is the validation error returned by
// FetchSignMessageRequest.Validate if the designated constraints aren't met.
type FetchSignMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchSignMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchSignMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchSignMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchSignMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchSignMessageRequestValidationError) ErrorName() string {
	return "FetchSignMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchSignMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchSignMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchSignMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchSignMessageRequestValidationError{}

// Validate checks the field values on FetchSignMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchSignMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchSignMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchSignMessageResponseMultiError, or nil if none found.
func (m *FetchSignMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchSignMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SignMessage

	if len(errors) > 0 {
		return FetchSignMessageResponseMultiError(errors)
	}
	return nil
}

// FetchSignMessageResponseMultiError is an error wrapping multiple validation
// errors returned by FetchSignMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type FetchSignMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchSignMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchSignMessageResponseMultiError) AllErrors() []error { return m }

// FetchSignMessageResponseValidationError is the validation error returned by
// FetchSignMessageResponse.Validate if the designated constraints aren't met.
type FetchSignMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchSignMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchSignMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchSignMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchSignMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchSignMessageResponseValidationError) ErrorName() string {
	return "FetchSignMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FetchSignMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchSignMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchSignMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchSignMessageResponseValidationError{}

// Validate checks the field values on VerifySignToLoginSignRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifySignToLoginSignRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifySignToLoginSignRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifySignToLoginSignRequestMultiError, or nil if none found.
func (m *VerifySignToLoginSignRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifySignToLoginSignRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAddress()) != 42 {
		err := VerifySignToLoginSignRequestValidationError{
			field:  "Address",
			reason: "value length must be 42 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetMessage()) < 1 {
		err := VerifySignToLoginSignRequestValidationError{
			field:  "Message",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSign()) < 1 {
		err := VerifySignToLoginSignRequestValidationError{
			field:  "Sign",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VerifySignToLoginSignRequestMultiError(errors)
	}
	return nil
}

// VerifySignToLoginSignRequestMultiError is an error wrapping multiple
// validation errors returned by VerifySignToLoginSignRequest.ValidateAll() if
// the designated constraints aren't met.
type VerifySignToLoginSignRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifySignToLoginSignRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifySignToLoginSignRequestMultiError) AllErrors() []error { return m }

// VerifySignToLoginSignRequestValidationError is the validation error returned
// by VerifySignToLoginSignRequest.Validate if the designated constraints
// aren't met.
type VerifySignToLoginSignRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifySignToLoginSignRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifySignToLoginSignRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifySignToLoginSignRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifySignToLoginSignRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifySignToLoginSignRequestValidationError) ErrorName() string {
	return "VerifySignToLoginSignRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifySignToLoginSignRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifySignToLoginSignRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifySignToLoginSignRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifySignToLoginSignRequestValidationError{}

// Validate checks the field values on VerifySignToLoginSighResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifySignToLoginSighResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifySignToLoginSighResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// VerifySignToLoginSighResponseMultiError, or nil if none found.
func (m *VerifySignToLoginSighResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifySignToLoginSighResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Registered

	if len(errors) > 0 {
		return VerifySignToLoginSighResponseMultiError(errors)
	}
	return nil
}

// VerifySignToLoginSighResponseMultiError is an error wrapping multiple
// validation errors returned by VerifySignToLoginSighResponse.ValidateAll()
// if the designated constraints aren't met.
type VerifySignToLoginSighResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifySignToLoginSighResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifySignToLoginSighResponseMultiError) AllErrors() []error { return m }

// VerifySignToLoginSighResponseValidationError is the validation error
// returned by VerifySignToLoginSighResponse.Validate if the designated
// constraints aren't met.
type VerifySignToLoginSighResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifySignToLoginSighResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifySignToLoginSighResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifySignToLoginSighResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifySignToLoginSighResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifySignToLoginSighResponseValidationError) ErrorName() string {
	return "VerifySignToLoginSighResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifySignToLoginSighResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifySignToLoginSighResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifySignToLoginSighResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifySignToLoginSighResponseValidationError{}
