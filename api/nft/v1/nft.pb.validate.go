// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/nft/v1/nft.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetNftDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNftDetailRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ContractAddress

	// no validation rules for TokenId

	return nil
}

// GetNftDetailRequestValidationError is the validation error returned by
// GetNftDetailRequest.Validate if the designated constraints aren't met.
type GetNftDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNftDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNftDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNftDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNftDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNftDetailRequestValidationError) ErrorName() string {
	return "GetNftDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNftDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNftDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNftDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNftDetailRequestValidationError{}

// Validate checks the field values on GetNftDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNftDetailResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNftDetailResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetNftDetailResponseValidationError is the validation error returned by
// GetNftDetailResponse.Validate if the designated constraints aren't met.
type GetNftDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNftDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNftDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNftDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNftDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNftDetailResponseValidationError) ErrorName() string {
	return "GetNftDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNftDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNftDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNftDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNftDetailResponseValidationError{}

// Validate checks the field values on GetAddressNftsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAddressNftsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetBaseListRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAddressNftsRequestValidationError{
				field:  "BaseListRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Address

	return nil
}

// GetAddressNftsRequestValidationError is the validation error returned by
// GetAddressNftsRequest.Validate if the designated constraints aren't met.
type GetAddressNftsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressNftsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressNftsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressNftsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressNftsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressNftsRequestValidationError) ErrorName() string {
	return "GetAddressNftsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressNftsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressNftsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressNftsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressNftsRequestValidationError{}

// Validate checks the field values on GetAddressNftResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAddressNftResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetBaseListResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAddressNftResponseValidationError{
				field:  "BaseListResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSummaries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAddressNftResponseValidationError{
					field:  fmt.Sprintf("Summaries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetAddressNftResponseValidationError is the validation error returned by
// GetAddressNftResponse.Validate if the designated constraints aren't met.
type GetAddressNftResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressNftResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressNftResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressNftResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressNftResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressNftResponseValidationError) ErrorName() string {
	return "GetAddressNftResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressNftResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressNftResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressNftResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressNftResponseValidationError{}
