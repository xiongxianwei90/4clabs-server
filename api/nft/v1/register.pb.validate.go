// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/nft/v1/register.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on RegisterNftRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisterNftRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetUserAddress()) != 42 {
		return RegisterNftRequestValidationError{
			field:  "UserAddress",
			reason: "value length must be 42 runes",
		}

	}

	if len(m.GetNfts()) < 1 {
		return RegisterNftRequestValidationError{
			field:  "Nfts",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetNfts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegisterNftRequestValidationError{
					field:  fmt.Sprintf("Nfts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RegisterNftRequestValidationError is the validation error returned by
// RegisterNftRequest.Validate if the designated constraints aren't met.
type RegisterNftRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterNftRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterNftRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterNftRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterNftRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterNftRequestValidationError) ErrorName() string {
	return "RegisterNftRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterNftRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterNftRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterNftRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterNftRequestValidationError{}

// Validate checks the field values on RegisterNftResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisterNftResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RegisterNftResponseValidationError is the validation error returned by
// RegisterNftResponse.Validate if the designated constraints aren't met.
type RegisterNftResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterNftResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterNftResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterNftResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterNftResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterNftResponseValidationError) ErrorName() string {
	return "RegisterNftResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterNftResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterNftResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterNftResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterNftResponseValidationError{}

// Validate checks the field values on ListRegisterNftRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListRegisterNftRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetBaseListRequest() == nil {
		return ListRegisterNftRequestValidationError{
			field:  "BaseListRequest",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetBaseListRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRegisterNftRequestValidationError{
				field:  "BaseListRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Address

	return nil
}

// ListRegisterNftRequestValidationError is the validation error returned by
// ListRegisterNftRequest.Validate if the designated constraints aren't met.
type ListRegisterNftRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegisterNftRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegisterNftRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegisterNftRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegisterNftRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegisterNftRequestValidationError) ErrorName() string {
	return "ListRegisterNftRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegisterNftRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegisterNftRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegisterNftRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegisterNftRequestValidationError{}

// Validate checks the field values on ListRegisterNftResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListRegisterNftResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetBaseListResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRegisterNftResponseValidationError{
				field:  "BaseListResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSummaries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRegisterNftResponseValidationError{
					field:  fmt.Sprintf("Summaries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListRegisterNftResponseValidationError is the validation error returned by
// ListRegisterNftResponse.Validate if the designated constraints aren't met.
type ListRegisterNftResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegisterNftResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegisterNftResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegisterNftResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegisterNftResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegisterNftResponseValidationError) ErrorName() string {
	return "ListRegisterNftResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegisterNftResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegisterNftResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegisterNftResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegisterNftResponseValidationError{}

// Validate checks the field values on RegisterNftRequest_Nft with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisterNftRequest_Nft) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetContractAddress()) != 42 {
		return RegisterNftRequest_NftValidationError{
			field:  "ContractAddress",
			reason: "value length must be 42 runes",
		}

	}

	if utf8.RuneCountInString(m.GetTokenId()) < 1 {
		return RegisterNftRequest_NftValidationError{
			field:  "TokenId",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// RegisterNftRequest_NftValidationError is the validation error returned by
// RegisterNftRequest_Nft.Validate if the designated constraints aren't met.
type RegisterNftRequest_NftValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterNftRequest_NftValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterNftRequest_NftValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterNftRequest_NftValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterNftRequest_NftValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterNftRequest_NftValidationError) ErrorName() string {
	return "RegisterNftRequest_NftValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterNftRequest_NftValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterNftRequest_Nft.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterNftRequest_NftValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterNftRequest_NftValidationError{}
