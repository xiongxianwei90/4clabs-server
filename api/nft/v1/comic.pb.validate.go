// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/nft/v1/comic.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ComicCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ComicCreateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetOriginNftContractAddress()) != 42 {
		return ComicCreateRequestValidationError{
			field:  "OriginNftContractAddress",
			reason: "value length must be 42 runes",
		}

	}

	if utf8.RuneCountInString(m.GetOriginNftTokenId()) < 1 {
		return ComicCreateRequestValidationError{
			field:  "OriginNftTokenId",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetMintLimit() < 1 {
		return ComicCreateRequestValidationError{
			field:  "MintLimit",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetMintPrice() < 0 {
		return ComicCreateRequestValidationError{
			field:  "MintPrice",
			reason: "value must be greater than or equal to 0",
		}
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return ComicCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetMinterAddress()) != 42 {
		return ComicCreateRequestValidationError{
			field:  "MinterAddress",
			reason: "value length must be 42 runes",
		}

	}

	return nil
}

// ComicCreateRequestValidationError is the validation error returned by
// ComicCreateRequest.Validate if the designated constraints aren't met.
type ComicCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComicCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComicCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComicCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComicCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComicCreateRequestValidationError) ErrorName() string {
	return "ComicCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ComicCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComicCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComicCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComicCreateRequestValidationError{}

// Validate checks the field values on ComicCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ComicCreateResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ComicCreateResponseValidationError is the validation error returned by
// ComicCreateResponse.Validate if the designated constraints aren't met.
type ComicCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComicCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComicCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComicCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComicCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComicCreateResponseValidationError) ErrorName() string {
	return "ComicCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ComicCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComicCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComicCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComicCreateResponseValidationError{}

// Validate checks the field values on ListComicWorkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListComicWorkRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetBaseListRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListComicWorkRequestValidationError{
				field:  "BaseListRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Address

	return nil
}

// ListComicWorkRequestValidationError is the validation error returned by
// ListComicWorkRequest.Validate if the designated constraints aren't met.
type ListComicWorkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComicWorkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComicWorkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComicWorkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComicWorkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComicWorkRequestValidationError) ErrorName() string {
	return "ListComicWorkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListComicWorkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComicWorkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComicWorkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComicWorkRequestValidationError{}

// Validate checks the field values on ListComicWorkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListComicWorkResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetBaseListResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListComicWorkResponseValidationError{
				field:  "BaseListResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetComicWorks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListComicWorkResponseValidationError{
					field:  fmt.Sprintf("ComicWorks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListComicWorkResponseValidationError is the validation error returned by
// ListComicWorkResponse.Validate if the designated constraints aren't met.
type ListComicWorkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComicWorkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComicWorkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComicWorkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComicWorkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComicWorkResponseValidationError) ErrorName() string {
	return "ListComicWorkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListComicWorkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComicWorkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComicWorkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComicWorkResponseValidationError{}
