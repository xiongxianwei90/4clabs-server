// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: api/nft/v1/typs.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SortByPrice int32

const (
	SortByPrice_SORT_BY_PRICE_UNSPECIFIED SortByPrice = 0
	SortByPrice_SORT_BY_PRICE_ASCENDING   SortByPrice = 1
	SortByPrice_SORT_BY_PRICE_DESCENDING  SortByPrice = 2
)

// Enum value maps for SortByPrice.
var (
	SortByPrice_name = map[int32]string{
		0: "SORT_BY_PRICE_UNSPECIFIED",
		1: "SORT_BY_PRICE_ASCENDING",
		2: "SORT_BY_PRICE_DESCENDING",
	}
	SortByPrice_value = map[string]int32{
		"SORT_BY_PRICE_UNSPECIFIED": 0,
		"SORT_BY_PRICE_ASCENDING":   1,
		"SORT_BY_PRICE_DESCENDING":  2,
	}
)

func (x SortByPrice) Enum() *SortByPrice {
	p := new(SortByPrice)
	*p = x
	return p
}

func (x SortByPrice) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortByPrice) Descriptor() protoreflect.EnumDescriptor {
	return file_api_nft_v1_typs_proto_enumTypes[0].Descriptor()
}

func (SortByPrice) Type() protoreflect.EnumType {
	return &file_api_nft_v1_typs_proto_enumTypes[0]
}

func (x SortByPrice) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortByPrice.Descriptor instead.
func (SortByPrice) EnumDescriptor() ([]byte, []int) {
	return file_api_nft_v1_typs_proto_rawDescGZIP(), []int{0}
}

type ComicWork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginNft *Summary `protobuf:"bytes,1,opt,name=origin_nft,json=originNft,proto3" json:"origin_nft,omitempty"`
	ComicId   string   `protobuf:"bytes,2,opt,name=comic_id,json=comicId,proto3" json:"comic_id,omitempty"`
	// mint config
	MintLimit          uint32   `protobuf:"varint,3,opt,name=mint_limit,json=mintLimit,proto3" json:"mint_limit,omitempty"`
	MintPrice          float32  `protobuf:"fixed32,4,opt,name=mint_price,json=mintPrice,proto3" json:"mint_price,omitempty"`
	Name               string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAtTimestamp uint32   `protobuf:"varint,6,opt,name=created_at_timestamp,json=createdAtTimestamp,proto3" json:"created_at_timestamp,omitempty"`
	MinterAddress      string   `protobuf:"bytes,7,opt,name=minter_address,json=minterAddress,proto3" json:"minter_address,omitempty"`
	ImageUrl           []string `protobuf:"bytes,8,rep,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
}

func (x *ComicWork) Reset() {
	*x = ComicWork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nft_v1_typs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComicWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComicWork) ProtoMessage() {}

func (x *ComicWork) ProtoReflect() protoreflect.Message {
	mi := &file_api_nft_v1_typs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComicWork.ProtoReflect.Descriptor instead.
func (*ComicWork) Descriptor() ([]byte, []int) {
	return file_api_nft_v1_typs_proto_rawDescGZIP(), []int{0}
}

func (x *ComicWork) GetOriginNft() *Summary {
	if x != nil {
		return x.OriginNft
	}
	return nil
}

func (x *ComicWork) GetComicId() string {
	if x != nil {
		return x.ComicId
	}
	return ""
}

func (x *ComicWork) GetMintLimit() uint32 {
	if x != nil {
		return x.MintLimit
	}
	return 0
}

func (x *ComicWork) GetMintPrice() float32 {
	if x != nil {
		return x.MintPrice
	}
	return 0
}

func (x *ComicWork) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComicWork) GetCreatedAtTimestamp() uint32 {
	if x != nil {
		return x.CreatedAtTimestamp
	}
	return 0
}

func (x *ComicWork) GetMinterAddress() string {
	if x != nil {
		return x.MinterAddress
	}
	return ""
}

func (x *ComicWork) GetImageUrl() []string {
	if x != nil {
		return x.ImageUrl
	}
	return nil
}

type ComicNft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId string     `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Owner   string     `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Summary *ComicWork `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *ComicNft) Reset() {
	*x = ComicNft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nft_v1_typs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComicNft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComicNft) ProtoMessage() {}

func (x *ComicNft) ProtoReflect() protoreflect.Message {
	mi := &file_api_nft_v1_typs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComicNft.ProtoReflect.Descriptor instead.
func (*ComicNft) Descriptor() ([]byte, []int) {
	return file_api_nft_v1_typs_proto_rawDescGZIP(), []int{1}
}

func (x *ComicNft) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *ComicNft) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ComicNft) GetSummary() *ComicWork {
	if x != nil {
		return x.Summary
	}
	return nil
}

type Trait struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Trait) Reset() {
	*x = Trait{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nft_v1_typs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trait) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trait) ProtoMessage() {}

func (x *Trait) ProtoReflect() protoreflect.Message {
	mi := &file_api_nft_v1_typs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trait.ProtoReflect.Descriptor instead.
func (*Trait) Descriptor() ([]byte, []int) {
	return file_api_nft_v1_typs_proto_rawDescGZIP(), []int{2}
}

func (x *Trait) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Trait) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Rarity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score float32 `protobuf:"fixed32,1,opt,name=score,proto3" json:"score,omitempty"`
	Rank  int32   `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Total int32   `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Rarity) Reset() {
	*x = Rarity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nft_v1_typs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rarity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rarity) ProtoMessage() {}

func (x *Rarity) ProtoReflect() protoreflect.Message {
	mi := &file_api_nft_v1_typs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rarity.ProtoReflect.Descriptor instead.
func (*Rarity) Descriptor() ([]byte, []int) {
	return file_api_nft_v1_typs_proto_rawDescGZIP(), []int{3}
}

func (x *Rarity) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Rarity) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *Rarity) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary *Summary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	Stat    *Stat    `protobuf:"bytes,2,opt,name=stat,proto3" json:"stat,omitempty"`
}

func (x *Detail) Reset() {
	*x = Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nft_v1_typs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Detail) ProtoMessage() {}

func (x *Detail) ProtoReflect() protoreflect.Message {
	mi := &file_api_nft_v1_typs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Detail.ProtoReflect.Descriptor instead.
func (*Detail) Descriptor() ([]byte, []int) {
	return file_api_nft_v1_typs_proto_rawDescGZIP(), []int{4}
}

func (x *Detail) GetSummary() *Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *Detail) GetStat() *Stat {
	if x != nil {
		return x.Stat
	}
	return nil
}

type Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blockchain      string   `protobuf:"bytes,1,opt,name=blockchain,proto3" json:"blockchain,omitempty"`
	CollectionName  string   `protobuf:"bytes,2,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	CollectionSlug  string   `protobuf:"bytes,3,opt,name=collection_slug,json=collectionSlug,proto3" json:"collection_slug,omitempty"`
	ContractAddress string   `protobuf:"bytes,4,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	TokenId         string   `protobuf:"bytes,5,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Name            string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Description     string   `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Image           string   `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty"`
	AnimationUrl    string   `protobuf:"bytes,9,opt,name=animation_url,json=animationUrl,proto3" json:"animation_url,omitempty"`
	OwnerAddresses  []string `protobuf:"bytes,12,rep,name=owner_addresses,json=ownerAddresses,proto3" json:"owner_addresses,omitempty"`
	Traits          []*Trait `protobuf:"bytes,13,rep,name=traits,proto3" json:"traits,omitempty"`
	Rarity          *Rarity  `protobuf:"bytes,11,opt,name=rarity,proto3" json:"rarity,omitempty"`
	Registered      bool     `protobuf:"varint,14,opt,name=registered,proto3" json:"registered,omitempty"`
}

func (x *Summary) Reset() {
	*x = Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nft_v1_typs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summary) ProtoMessage() {}

func (x *Summary) ProtoReflect() protoreflect.Message {
	mi := &file_api_nft_v1_typs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summary.ProtoReflect.Descriptor instead.
func (*Summary) Descriptor() ([]byte, []int) {
	return file_api_nft_v1_typs_proto_rawDescGZIP(), []int{5}
}

func (x *Summary) GetBlockchain() string {
	if x != nil {
		return x.Blockchain
	}
	return ""
}

func (x *Summary) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *Summary) GetCollectionSlug() string {
	if x != nil {
		return x.CollectionSlug
	}
	return ""
}

func (x *Summary) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *Summary) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *Summary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Summary) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Summary) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Summary) GetAnimationUrl() string {
	if x != nil {
		return x.AnimationUrl
	}
	return ""
}

func (x *Summary) GetOwnerAddresses() []string {
	if x != nil {
		return x.OwnerAddresses
	}
	return nil
}

func (x *Summary) GetTraits() []*Trait {
	if x != nil {
		return x.Traits
	}
	return nil
}

func (x *Summary) GetRarity() *Rarity {
	if x != nil {
		return x.Rarity
	}
	return nil
}

func (x *Summary) GetRegistered() bool {
	if x != nil {
		return x.Registered
	}
	return false
}

type Rank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score       float32 `protobuf:"fixed32,1,opt,name=score,proto3" json:"score,omitempty"`
	Rank        uint32  `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Total       uint32  `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	LastUpdated uint64  `protobuf:"varint,4,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *Rank) Reset() {
	*x = Rank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nft_v1_typs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rank) ProtoMessage() {}

func (x *Rank) ProtoReflect() protoreflect.Message {
	mi := &file_api_nft_v1_typs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rank.ProtoReflect.Descriptor instead.
func (*Rank) Descriptor() ([]byte, []int) {
	return file_api_nft_v1_typs_proto_rawDescGZIP(), []int{6}
}

func (x *Rank) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Rank) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *Rank) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Rank) GetLastUpdated() uint64 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

type Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastUpdated        uint64            `protobuf:"varint,1,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	SaleNum_7D         uint64            `protobuf:"varint,2,opt,name=sale_num_7d,json=saleNum7d,proto3" json:"sale_num_7d,omitempty"`
	SaleNumAll         uint64            `protobuf:"varint,3,opt,name=sale_num_all,json=saleNumAll,proto3" json:"sale_num_all,omitempty"`
	MaxPrice           *Stat_PriceInfo   `protobuf:"bytes,4,opt,name=max_price,json=maxPrice,proto3" json:"max_price,omitempty"`
	MinPrice           *Stat_PriceInfo   `protobuf:"bytes,5,opt,name=min_price,json=minPrice,proto3" json:"min_price,omitempty"`
	LastPrice          *Stat_PriceInfo   `protobuf:"bytes,10,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`
	PastOwners         []*Stat_OwnerStat `protobuf:"bytes,6,rep,name=past_owners,json=pastOwners,proto3" json:"past_owners,omitempty"`
	CreateTime         uint64            `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	StartHoldingTime   uint64            `protobuf:"varint,8,opt,name=start_holding_time,json=startHoldingTime,proto3" json:"start_holding_time,omitempty"`
	LongestHoldingTime uint64            `protobuf:"varint,9,opt,name=longest_holding_time,json=longestHoldingTime,proto3" json:"longest_holding_time,omitempty"`
}

func (x *Stat) Reset() {
	*x = Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nft_v1_typs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stat) ProtoMessage() {}

func (x *Stat) ProtoReflect() protoreflect.Message {
	mi := &file_api_nft_v1_typs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stat.ProtoReflect.Descriptor instead.
func (*Stat) Descriptor() ([]byte, []int) {
	return file_api_nft_v1_typs_proto_rawDescGZIP(), []int{7}
}

func (x *Stat) GetLastUpdated() uint64 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

func (x *Stat) GetSaleNum_7D() uint64 {
	if x != nil {
		return x.SaleNum_7D
	}
	return 0
}

func (x *Stat) GetSaleNumAll() uint64 {
	if x != nil {
		return x.SaleNumAll
	}
	return 0
}

func (x *Stat) GetMaxPrice() *Stat_PriceInfo {
	if x != nil {
		return x.MaxPrice
	}
	return nil
}

func (x *Stat) GetMinPrice() *Stat_PriceInfo {
	if x != nil {
		return x.MinPrice
	}
	return nil
}

func (x *Stat) GetLastPrice() *Stat_PriceInfo {
	if x != nil {
		return x.LastPrice
	}
	return nil
}

func (x *Stat) GetPastOwners() []*Stat_OwnerStat {
	if x != nil {
		return x.PastOwners
	}
	return nil
}

func (x *Stat) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Stat) GetStartHoldingTime() uint64 {
	if x != nil {
		return x.StartHoldingTime
	}
	return 0
}

func (x *Stat) GetLongestHoldingTime() uint64 {
	if x != nil {
		return x.LongestHoldingTime
	}
	return 0
}

type Sort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByPrice SortByPrice `protobuf:"varint,1,opt,name=byPrice,proto3,enum=api.nft.v1.SortByPrice" json:"byPrice,omitempty"`
}

func (x *Sort) Reset() {
	*x = Sort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nft_v1_typs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sort) ProtoMessage() {}

func (x *Sort) ProtoReflect() protoreflect.Message {
	mi := &file_api_nft_v1_typs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sort.ProtoReflect.Descriptor instead.
func (*Sort) Descriptor() ([]byte, []int) {
	return file_api_nft_v1_typs_proto_rawDescGZIP(), []int{8}
}

func (x *Sort) GetByPrice() SortByPrice {
	if x != nil {
		return x.ByPrice
	}
	return SortByPrice_SORT_BY_PRICE_UNSPECIFIED
}

type Stat_PriceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash               string  `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	PriceToken           float32 `protobuf:"fixed32,2,opt,name=price_token,json=priceToken,proto3" json:"price_token,omitempty"`
	TokenSymbol          string  `protobuf:"bytes,3,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
	TokenContractAddress string  `protobuf:"bytes,4,opt,name=token_contract_address,json=tokenContractAddress,proto3" json:"token_contract_address,omitempty"`
	PriceUsd             float32 `protobuf:"fixed32,5,opt,name=price_usd,json=priceUsd,proto3" json:"price_usd,omitempty"`
	Time                 uint64  `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Stat_PriceInfo) Reset() {
	*x = Stat_PriceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nft_v1_typs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stat_PriceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stat_PriceInfo) ProtoMessage() {}

func (x *Stat_PriceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_nft_v1_typs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stat_PriceInfo.ProtoReflect.Descriptor instead.
func (*Stat_PriceInfo) Descriptor() ([]byte, []int) {
	return file_api_nft_v1_typs_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Stat_PriceInfo) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Stat_PriceInfo) GetPriceToken() float32 {
	if x != nil {
		return x.PriceToken
	}
	return 0
}

func (x *Stat_PriceInfo) GetTokenSymbol() string {
	if x != nil {
		return x.TokenSymbol
	}
	return ""
}

func (x *Stat_PriceInfo) GetTokenContractAddress() string {
	if x != nil {
		return x.TokenContractAddress
	}
	return ""
}

func (x *Stat_PriceInfo) GetPriceUsd() float32 {
	if x != nil {
		return x.PriceUsd
	}
	return 0
}

func (x *Stat_PriceInfo) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type Stat_OwnerStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	HoldingTime uint64 `protobuf:"varint,2,opt,name=holding_time,json=holdingTime,proto3" json:"holding_time,omitempty"`
}

func (x *Stat_OwnerStat) Reset() {
	*x = Stat_OwnerStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_nft_v1_typs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stat_OwnerStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stat_OwnerStat) ProtoMessage() {}

func (x *Stat_OwnerStat) ProtoReflect() protoreflect.Message {
	mi := &file_api_nft_v1_typs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stat_OwnerStat.ProtoReflect.Descriptor instead.
func (*Stat_OwnerStat) Descriptor() ([]byte, []int) {
	return file_api_nft_v1_typs_proto_rawDescGZIP(), []int{7, 1}
}

func (x *Stat_OwnerStat) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Stat_OwnerStat) GetHoldingTime() uint64 {
	if x != nil {
		return x.HoldingTime
	}
	return 0
}

var File_api_nft_v1_typs_proto protoreflect.FileDescriptor

var file_api_nft_v1_typs_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x66, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x76, 0x31, 0x22, 0xa2, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x57, 0x6f, 0x72,
	0x6b, 0x12, 0x32, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x66, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x4e, 0x66, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x6c, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x69,
	0x63, 0x4e, 0x66, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x31, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x69, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x48, 0x0a, 0x06, 0x52, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x5d, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x04,
	0x73, 0x74, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x04, 0x73, 0x74,
	0x61, 0x74, 0x22, 0xd2, 0x03, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x75, 0x67,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x69, 0x74, 0x52, 0x06, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x72,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x22, 0x69, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x22, 0xf2, 0x05, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e,
	0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x37, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x37, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x41, 0x6c, 0x6c,
	0x12, 0x37, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a,
	0x70, 0x61, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x6f,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xcf, 0x01, 0x0a, 0x09,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x55, 0x73, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x48, 0x0a,
	0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12,
	0x31, 0x0a, 0x07, 0x62, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x07, 0x62, 0x79, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x2a, 0x67, 0x0a, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x5f, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44,
	0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x42, 0x1d, 0x5a, 0x1b, 0x34,
	0x63, 0x6c, 0x61, 0x62, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6e, 0x66, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_api_nft_v1_typs_proto_rawDescOnce sync.Once
	file_api_nft_v1_typs_proto_rawDescData = file_api_nft_v1_typs_proto_rawDesc
)

func file_api_nft_v1_typs_proto_rawDescGZIP() []byte {
	file_api_nft_v1_typs_proto_rawDescOnce.Do(func() {
		file_api_nft_v1_typs_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_nft_v1_typs_proto_rawDescData)
	})
	return file_api_nft_v1_typs_proto_rawDescData
}

var file_api_nft_v1_typs_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_nft_v1_typs_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_nft_v1_typs_proto_goTypes = []interface{}{
	(SortByPrice)(0),       // 0: api.nft.v1.SortByPrice
	(*ComicWork)(nil),      // 1: api.nft.v1.ComicWork
	(*ComicNft)(nil),       // 2: api.nft.v1.ComicNft
	(*Trait)(nil),          // 3: api.nft.v1.Trait
	(*Rarity)(nil),         // 4: api.nft.v1.Rarity
	(*Detail)(nil),         // 5: api.nft.v1.Detail
	(*Summary)(nil),        // 6: api.nft.v1.Summary
	(*Rank)(nil),           // 7: api.nft.v1.Rank
	(*Stat)(nil),           // 8: api.nft.v1.Stat
	(*Sort)(nil),           // 9: api.nft.v1.Sort
	(*Stat_PriceInfo)(nil), // 10: api.nft.v1.Stat.PriceInfo
	(*Stat_OwnerStat)(nil), // 11: api.nft.v1.Stat.OwnerStat
}
var file_api_nft_v1_typs_proto_depIdxs = []int32{
	6,  // 0: api.nft.v1.ComicWork.origin_nft:type_name -> api.nft.v1.Summary
	1,  // 1: api.nft.v1.ComicNft.summary:type_name -> api.nft.v1.ComicWork
	6,  // 2: api.nft.v1.Detail.summary:type_name -> api.nft.v1.Summary
	8,  // 3: api.nft.v1.Detail.stat:type_name -> api.nft.v1.Stat
	3,  // 4: api.nft.v1.Summary.traits:type_name -> api.nft.v1.Trait
	4,  // 5: api.nft.v1.Summary.rarity:type_name -> api.nft.v1.Rarity
	10, // 6: api.nft.v1.Stat.max_price:type_name -> api.nft.v1.Stat.PriceInfo
	10, // 7: api.nft.v1.Stat.min_price:type_name -> api.nft.v1.Stat.PriceInfo
	10, // 8: api.nft.v1.Stat.last_price:type_name -> api.nft.v1.Stat.PriceInfo
	11, // 9: api.nft.v1.Stat.past_owners:type_name -> api.nft.v1.Stat.OwnerStat
	0,  // 10: api.nft.v1.Sort.byPrice:type_name -> api.nft.v1.SortByPrice
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_api_nft_v1_typs_proto_init() }
func file_api_nft_v1_typs_proto_init() {
	if File_api_nft_v1_typs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_nft_v1_typs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComicWork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nft_v1_typs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComicNft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nft_v1_typs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trait); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nft_v1_typs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rarity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nft_v1_typs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nft_v1_typs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nft_v1_typs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nft_v1_typs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nft_v1_typs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nft_v1_typs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stat_PriceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_nft_v1_typs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stat_OwnerStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_nft_v1_typs_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_nft_v1_typs_proto_goTypes,
		DependencyIndexes: file_api_nft_v1_typs_proto_depIdxs,
		EnumInfos:         file_api_nft_v1_typs_proto_enumTypes,
		MessageInfos:      file_api_nft_v1_typs_proto_msgTypes,
	}.Build()
	File_api_nft_v1_typs_proto = out.File
	file_api_nft_v1_typs_proto_rawDesc = nil
	file_api_nft_v1_typs_proto_goTypes = nil
	file_api_nft_v1_typs_proto_depIdxs = nil
}
