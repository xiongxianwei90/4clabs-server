syntax = "proto3";

package api.service.v1;

import "api/auth/v1/auth.proto";
import "api/nft/v1/comic.proto";
import "api/nft/v1/nft.proto";
import "api/nft/v1/register.proto";
import "api/tickets/v1/tickets.proto";
import "third_party/google/api/annotations.proto";


option go_package = "4clabs-server/api/service/v1;v1";


service Nft {
    // commic works
    rpc ListComicWorks(api.nft.v1.ListComicWorkRequest) returns (api.nft.v1.ListComicWorkResponse) {
        option (google.api.http) = {
            get: "/v1/nft/{address}/comic_works",
        };
    }

    // register nfts
    rpc ListRegsiterNfts(api.nft.v1.ListRegisterNftRequest) returns (api.nft.v1.ListRegisterNftResponse) {
        option (google.api.http) = {
            get: "/v1/nft/{address}/registers",
        };
    }

    // ticket WL
    rpc InTicketsWLRequest(api.tickets.v1.CanMintRequest) returns (api.tickets.v1.CantMintResponse) {
        option (google.api.http) = {
            get: "/v1/tickets/{address}/can_mint",
        };
    }

    // 签名登录
    rpc SignToLogin(api.auth.v1.VerifySignToLoginSignRequest) returns (api.auth.v1.VerifySignToLoginSighResponse) {
        option (google.api.http) = {
            post: "/v1/address/verify_sign",
            body: "*"
        };
    }

    // 拉取地址对应的nonce
    rpc FetchNonce(api.auth.v1.FetchSignMessageRequest) returns (api.auth.v1.FetchSignMessageResponse) {
        option (google.api.http) = {
            get: "/v1/address/{address}/sign_message",
        };
    }

    // 地址下nft列表
    rpc GetAddressNfts(api.nft.v1.GetAddressNftsRequest) returns (api.nft.v1.GetAddressNftResponse) {
        option (google.api.http) = {
            get: "/v1/address/{address}/nfts",
        };
    };

    // nft详情页
    rpc GetNftDetail(api.nft.v1.GetNftDetailRequest) returns (api.nft.v1.GetNftDetailResponse) {
        option (google.api.http) = {
            get: "/v1/nft/collection/{contract_address}/token/{token_id}",
        };
    }
}