// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/service/v1/service.proto

package v1

import (
	v13 "4clabs-server/api/auth/v1"
	v1 "4clabs-server/api/comic/v1"
	v11 "4clabs-server/api/nft/v1"
	v14 "4clabs-server/api/script/v1"
	v12 "4clabs-server/api/tickets/v1"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NftClient is the client API for Nft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NftClient interface {
	// commic works
	ListComicWorks(ctx context.Context, in *v1.ListComicWorkRequest, opts ...grpc.CallOption) (*v1.ListComicWorkResponse, error)
	CreateComic(ctx context.Context, in *v1.ComicCreateRequest, opts ...grpc.CallOption) (*v1.ComicCreateResponse, error)
	// register nft
	RegisterNft(ctx context.Context, in *v11.RegisterNftRequest, opts ...grpc.CallOption) (*v11.RegisterNftResponse, error)
	// register nfts
	ListRegsiterNfts(ctx context.Context, in *v11.ListRegisterNftRequest, opts ...grpc.CallOption) (*v11.ListRegisterNftResponse, error)
	// ticket WL
	InTicketsWLRequest(ctx context.Context, in *v12.CanMintRequest, opts ...grpc.CallOption) (*v12.CantMintResponse, error)
	// 签名登录
	SignToLogin(ctx context.Context, in *v13.VerifySignToLoginSignRequest, opts ...grpc.CallOption) (*v13.VerifySignToLoginSighResponse, error)
	// 拉取地址对应的nonce
	FetchNonce(ctx context.Context, in *v13.FetchSignMessageRequest, opts ...grpc.CallOption) (*v13.FetchSignMessageResponse, error)
	// 地址下nft列表
	GetAddressNfts(ctx context.Context, in *v11.GetAddressNftsRequest, opts ...grpc.CallOption) (*v11.GetAddressNftResponse, error)
	// nft详情页
	GetNftDetail(ctx context.Context, in *v11.GetNftDetailRequest, opts ...grpc.CallOption) (*v11.GetNftDetailResponse, error)
	// 二创NFT列表
	GetComicNftList(ctx context.Context, in *v11.ListComicNftRequest, opts ...grpc.CallOption) (*v11.ListComicNftResponse, error)
	// 获取comic 下所有token
	GetComicNftById(ctx context.Context, in *v11.ListComicNftByComicRequest, opts ...grpc.CallOption) (*v11.ListComicNftByComicResponse, error)
	// register nft
	NftPurchase(ctx context.Context, in *v11.PurchaseComicNftRequest, opts ...grpc.CallOption) (*v11.PurchaseComicNftResponse, error)
	// 合约事件监听 更新数据库
	ScriptRegisterUpdate(ctx context.Context, in *v14.ScriptRegisterRequest, opts ...grpc.CallOption) (*v14.ScriptRegisterResponse, error)
	GetAboutMine(ctx context.Context, in *v1.ListAboutMineComicWorkRequest, opts ...grpc.CallOption) (*v1.ListAboutMineComicWorkResponse, error)
	ScriptComicWorkCreate(ctx context.Context, in *v14.ScriptComicWorksCreateRequest, opts ...grpc.CallOption) (*v14.ScriptComicWorksCreateResponse, error)
	ScriptComicWorkSold(ctx context.Context, in *v14.ScriptComicWorksSoldRequest, opts ...grpc.CallOption) (*v14.ScriptComicWorksSoldResponse, error)
}

type nftClient struct {
	cc grpc.ClientConnInterface
}

func NewNftClient(cc grpc.ClientConnInterface) NftClient {
	return &nftClient{cc}
}

func (c *nftClient) ListComicWorks(ctx context.Context, in *v1.ListComicWorkRequest, opts ...grpc.CallOption) (*v1.ListComicWorkResponse, error) {
	out := new(v1.ListComicWorkResponse)
	err := c.cc.Invoke(ctx, "/api.service.v1.Nft/ListComicWorks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftClient) CreateComic(ctx context.Context, in *v1.ComicCreateRequest, opts ...grpc.CallOption) (*v1.ComicCreateResponse, error) {
	out := new(v1.ComicCreateResponse)
	err := c.cc.Invoke(ctx, "/api.service.v1.Nft/CreateComic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftClient) RegisterNft(ctx context.Context, in *v11.RegisterNftRequest, opts ...grpc.CallOption) (*v11.RegisterNftResponse, error) {
	out := new(v11.RegisterNftResponse)
	err := c.cc.Invoke(ctx, "/api.service.v1.Nft/RegisterNft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftClient) ListRegsiterNfts(ctx context.Context, in *v11.ListRegisterNftRequest, opts ...grpc.CallOption) (*v11.ListRegisterNftResponse, error) {
	out := new(v11.ListRegisterNftResponse)
	err := c.cc.Invoke(ctx, "/api.service.v1.Nft/ListRegsiterNfts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftClient) InTicketsWLRequest(ctx context.Context, in *v12.CanMintRequest, opts ...grpc.CallOption) (*v12.CantMintResponse, error) {
	out := new(v12.CantMintResponse)
	err := c.cc.Invoke(ctx, "/api.service.v1.Nft/InTicketsWLRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftClient) SignToLogin(ctx context.Context, in *v13.VerifySignToLoginSignRequest, opts ...grpc.CallOption) (*v13.VerifySignToLoginSighResponse, error) {
	out := new(v13.VerifySignToLoginSighResponse)
	err := c.cc.Invoke(ctx, "/api.service.v1.Nft/SignToLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftClient) FetchNonce(ctx context.Context, in *v13.FetchSignMessageRequest, opts ...grpc.CallOption) (*v13.FetchSignMessageResponse, error) {
	out := new(v13.FetchSignMessageResponse)
	err := c.cc.Invoke(ctx, "/api.service.v1.Nft/FetchNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftClient) GetAddressNfts(ctx context.Context, in *v11.GetAddressNftsRequest, opts ...grpc.CallOption) (*v11.GetAddressNftResponse, error) {
	out := new(v11.GetAddressNftResponse)
	err := c.cc.Invoke(ctx, "/api.service.v1.Nft/GetAddressNfts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftClient) GetNftDetail(ctx context.Context, in *v11.GetNftDetailRequest, opts ...grpc.CallOption) (*v11.GetNftDetailResponse, error) {
	out := new(v11.GetNftDetailResponse)
	err := c.cc.Invoke(ctx, "/api.service.v1.Nft/GetNftDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftClient) GetComicNftList(ctx context.Context, in *v11.ListComicNftRequest, opts ...grpc.CallOption) (*v11.ListComicNftResponse, error) {
	out := new(v11.ListComicNftResponse)
	err := c.cc.Invoke(ctx, "/api.service.v1.Nft/GetComicNftList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftClient) GetComicNftById(ctx context.Context, in *v11.ListComicNftByComicRequest, opts ...grpc.CallOption) (*v11.ListComicNftByComicResponse, error) {
	out := new(v11.ListComicNftByComicResponse)
	err := c.cc.Invoke(ctx, "/api.service.v1.Nft/GetComicNftById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftClient) NftPurchase(ctx context.Context, in *v11.PurchaseComicNftRequest, opts ...grpc.CallOption) (*v11.PurchaseComicNftResponse, error) {
	out := new(v11.PurchaseComicNftResponse)
	err := c.cc.Invoke(ctx, "/api.service.v1.Nft/NftPurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftClient) ScriptRegisterUpdate(ctx context.Context, in *v14.ScriptRegisterRequest, opts ...grpc.CallOption) (*v14.ScriptRegisterResponse, error) {
	out := new(v14.ScriptRegisterResponse)
	err := c.cc.Invoke(ctx, "/api.service.v1.Nft/ScriptRegisterUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftClient) GetAboutMine(ctx context.Context, in *v1.ListAboutMineComicWorkRequest, opts ...grpc.CallOption) (*v1.ListAboutMineComicWorkResponse, error) {
	out := new(v1.ListAboutMineComicWorkResponse)
	err := c.cc.Invoke(ctx, "/api.service.v1.Nft/GetAboutMine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftClient) ScriptComicWorkCreate(ctx context.Context, in *v14.ScriptComicWorksCreateRequest, opts ...grpc.CallOption) (*v14.ScriptComicWorksCreateResponse, error) {
	out := new(v14.ScriptComicWorksCreateResponse)
	err := c.cc.Invoke(ctx, "/api.service.v1.Nft/ScriptComicWorkCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nftClient) ScriptComicWorkSold(ctx context.Context, in *v14.ScriptComicWorksSoldRequest, opts ...grpc.CallOption) (*v14.ScriptComicWorksSoldResponse, error) {
	out := new(v14.ScriptComicWorksSoldResponse)
	err := c.cc.Invoke(ctx, "/api.service.v1.Nft/ScriptComicWorkSold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NftServer is the server API for Nft service.
// All implementations must embed UnimplementedNftServer
// for forward compatibility
type NftServer interface {
	// commic works
	ListComicWorks(context.Context, *v1.ListComicWorkRequest) (*v1.ListComicWorkResponse, error)
	CreateComic(context.Context, *v1.ComicCreateRequest) (*v1.ComicCreateResponse, error)
	// register nft
	RegisterNft(context.Context, *v11.RegisterNftRequest) (*v11.RegisterNftResponse, error)
	// register nfts
	ListRegsiterNfts(context.Context, *v11.ListRegisterNftRequest) (*v11.ListRegisterNftResponse, error)
	// ticket WL
	InTicketsWLRequest(context.Context, *v12.CanMintRequest) (*v12.CantMintResponse, error)
	// 签名登录
	SignToLogin(context.Context, *v13.VerifySignToLoginSignRequest) (*v13.VerifySignToLoginSighResponse, error)
	// 拉取地址对应的nonce
	FetchNonce(context.Context, *v13.FetchSignMessageRequest) (*v13.FetchSignMessageResponse, error)
	// 地址下nft列表
	GetAddressNfts(context.Context, *v11.GetAddressNftsRequest) (*v11.GetAddressNftResponse, error)
	// nft详情页
	GetNftDetail(context.Context, *v11.GetNftDetailRequest) (*v11.GetNftDetailResponse, error)
	// 二创NFT列表
	GetComicNftList(context.Context, *v11.ListComicNftRequest) (*v11.ListComicNftResponse, error)
	// 获取comic 下所有token
	GetComicNftById(context.Context, *v11.ListComicNftByComicRequest) (*v11.ListComicNftByComicResponse, error)
	// register nft
	NftPurchase(context.Context, *v11.PurchaseComicNftRequest) (*v11.PurchaseComicNftResponse, error)
	// 合约事件监听 更新数据库
	ScriptRegisterUpdate(context.Context, *v14.ScriptRegisterRequest) (*v14.ScriptRegisterResponse, error)
	GetAboutMine(context.Context, *v1.ListAboutMineComicWorkRequest) (*v1.ListAboutMineComicWorkResponse, error)
	ScriptComicWorkCreate(context.Context, *v14.ScriptComicWorksCreateRequest) (*v14.ScriptComicWorksCreateResponse, error)
	ScriptComicWorkSold(context.Context, *v14.ScriptComicWorksSoldRequest) (*v14.ScriptComicWorksSoldResponse, error)
	mustEmbedUnimplementedNftServer()
}

// UnimplementedNftServer must be embedded to have forward compatible implementations.
type UnimplementedNftServer struct {
}

func (UnimplementedNftServer) ListComicWorks(context.Context, *v1.ListComicWorkRequest) (*v1.ListComicWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComicWorks not implemented")
}
func (UnimplementedNftServer) CreateComic(context.Context, *v1.ComicCreateRequest) (*v1.ComicCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComic not implemented")
}
func (UnimplementedNftServer) RegisterNft(context.Context, *v11.RegisterNftRequest) (*v11.RegisterNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNft not implemented")
}
func (UnimplementedNftServer) ListRegsiterNfts(context.Context, *v11.ListRegisterNftRequest) (*v11.ListRegisterNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegsiterNfts not implemented")
}
func (UnimplementedNftServer) InTicketsWLRequest(context.Context, *v12.CanMintRequest) (*v12.CantMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InTicketsWLRequest not implemented")
}
func (UnimplementedNftServer) SignToLogin(context.Context, *v13.VerifySignToLoginSignRequest) (*v13.VerifySignToLoginSighResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignToLogin not implemented")
}
func (UnimplementedNftServer) FetchNonce(context.Context, *v13.FetchSignMessageRequest) (*v13.FetchSignMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchNonce not implemented")
}
func (UnimplementedNftServer) GetAddressNfts(context.Context, *v11.GetAddressNftsRequest) (*v11.GetAddressNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressNfts not implemented")
}
func (UnimplementedNftServer) GetNftDetail(context.Context, *v11.GetNftDetailRequest) (*v11.GetNftDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNftDetail not implemented")
}
func (UnimplementedNftServer) GetComicNftList(context.Context, *v11.ListComicNftRequest) (*v11.ListComicNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComicNftList not implemented")
}
func (UnimplementedNftServer) GetComicNftById(context.Context, *v11.ListComicNftByComicRequest) (*v11.ListComicNftByComicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComicNftById not implemented")
}
func (UnimplementedNftServer) NftPurchase(context.Context, *v11.PurchaseComicNftRequest) (*v11.PurchaseComicNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftPurchase not implemented")
}
func (UnimplementedNftServer) ScriptRegisterUpdate(context.Context, *v14.ScriptRegisterRequest) (*v14.ScriptRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptRegisterUpdate not implemented")
}
func (UnimplementedNftServer) GetAboutMine(context.Context, *v1.ListAboutMineComicWorkRequest) (*v1.ListAboutMineComicWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAboutMine not implemented")
}
func (UnimplementedNftServer) ScriptComicWorkCreate(context.Context, *v14.ScriptComicWorksCreateRequest) (*v14.ScriptComicWorksCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptComicWorkCreate not implemented")
}
func (UnimplementedNftServer) ScriptComicWorkSold(context.Context, *v14.ScriptComicWorksSoldRequest) (*v14.ScriptComicWorksSoldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptComicWorkSold not implemented")
}
func (UnimplementedNftServer) mustEmbedUnimplementedNftServer() {}

// UnsafeNftServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NftServer will
// result in compilation errors.
type UnsafeNftServer interface {
	mustEmbedUnimplementedNftServer()
}

func RegisterNftServer(s grpc.ServiceRegistrar, srv NftServer) {
	s.RegisterService(&Nft_ServiceDesc, srv)
}

func _Nft_ListComicWorks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListComicWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).ListComicWorks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Nft/ListComicWorks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).ListComicWorks(ctx, req.(*v1.ListComicWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nft_CreateComic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ComicCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).CreateComic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Nft/CreateComic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).CreateComic(ctx, req.(*v1.ComicCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nft_RegisterNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.RegisterNftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).RegisterNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Nft/RegisterNft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).RegisterNft(ctx, req.(*v11.RegisterNftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nft_ListRegsiterNfts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.ListRegisterNftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).ListRegsiterNfts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Nft/ListRegsiterNfts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).ListRegsiterNfts(ctx, req.(*v11.ListRegisterNftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nft_InTicketsWLRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v12.CanMintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).InTicketsWLRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Nft/InTicketsWLRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).InTicketsWLRequest(ctx, req.(*v12.CanMintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nft_SignToLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v13.VerifySignToLoginSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).SignToLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Nft/SignToLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).SignToLogin(ctx, req.(*v13.VerifySignToLoginSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nft_FetchNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v13.FetchSignMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).FetchNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Nft/FetchNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).FetchNonce(ctx, req.(*v13.FetchSignMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nft_GetAddressNfts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.GetAddressNftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).GetAddressNfts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Nft/GetAddressNfts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).GetAddressNfts(ctx, req.(*v11.GetAddressNftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nft_GetNftDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.GetNftDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).GetNftDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Nft/GetNftDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).GetNftDetail(ctx, req.(*v11.GetNftDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nft_GetComicNftList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.ListComicNftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).GetComicNftList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Nft/GetComicNftList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).GetComicNftList(ctx, req.(*v11.ListComicNftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nft_GetComicNftById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.ListComicNftByComicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).GetComicNftById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Nft/GetComicNftById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).GetComicNftById(ctx, req.(*v11.ListComicNftByComicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nft_NftPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.PurchaseComicNftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).NftPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Nft/NftPurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).NftPurchase(ctx, req.(*v11.PurchaseComicNftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nft_ScriptRegisterUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v14.ScriptRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).ScriptRegisterUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Nft/ScriptRegisterUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).ScriptRegisterUpdate(ctx, req.(*v14.ScriptRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nft_GetAboutMine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListAboutMineComicWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).GetAboutMine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Nft/GetAboutMine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).GetAboutMine(ctx, req.(*v1.ListAboutMineComicWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nft_ScriptComicWorkCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v14.ScriptComicWorksCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).ScriptComicWorkCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Nft/ScriptComicWorkCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).ScriptComicWorkCreate(ctx, req.(*v14.ScriptComicWorksCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nft_ScriptComicWorkSold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v14.ScriptComicWorksSoldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftServer).ScriptComicWorkSold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Nft/ScriptComicWorkSold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftServer).ScriptComicWorkSold(ctx, req.(*v14.ScriptComicWorksSoldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Nft_ServiceDesc is the grpc.ServiceDesc for Nft service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nft_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.service.v1.Nft",
	HandlerType: (*NftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListComicWorks",
			Handler:    _Nft_ListComicWorks_Handler,
		},
		{
			MethodName: "CreateComic",
			Handler:    _Nft_CreateComic_Handler,
		},
		{
			MethodName: "RegisterNft",
			Handler:    _Nft_RegisterNft_Handler,
		},
		{
			MethodName: "ListRegsiterNfts",
			Handler:    _Nft_ListRegsiterNfts_Handler,
		},
		{
			MethodName: "InTicketsWLRequest",
			Handler:    _Nft_InTicketsWLRequest_Handler,
		},
		{
			MethodName: "SignToLogin",
			Handler:    _Nft_SignToLogin_Handler,
		},
		{
			MethodName: "FetchNonce",
			Handler:    _Nft_FetchNonce_Handler,
		},
		{
			MethodName: "GetAddressNfts",
			Handler:    _Nft_GetAddressNfts_Handler,
		},
		{
			MethodName: "GetNftDetail",
			Handler:    _Nft_GetNftDetail_Handler,
		},
		{
			MethodName: "GetComicNftList",
			Handler:    _Nft_GetComicNftList_Handler,
		},
		{
			MethodName: "GetComicNftById",
			Handler:    _Nft_GetComicNftById_Handler,
		},
		{
			MethodName: "NftPurchase",
			Handler:    _Nft_NftPurchase_Handler,
		},
		{
			MethodName: "ScriptRegisterUpdate",
			Handler:    _Nft_ScriptRegisterUpdate_Handler,
		},
		{
			MethodName: "GetAboutMine",
			Handler:    _Nft_GetAboutMine_Handler,
		},
		{
			MethodName: "ScriptComicWorkCreate",
			Handler:    _Nft_ScriptComicWorkCreate_Handler,
		},
		{
			MethodName: "ScriptComicWorkSold",
			Handler:    _Nft_ScriptComicWorkSold_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/service/v1/service.proto",
}
