// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package v1

import (
	v11 "4clabs-server/api/auth/v1"
	v12 "4clabs-server/api/nft/v1"
	v1 "4clabs-server/api/tickets/v1"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNftFetchNonce = "/api.service.v1.Nft/FetchNonce"
const OperationNftGetAddressNfts = "/api.service.v1.Nft/GetAddressNfts"
const OperationNftGetNftDetail = "/api.service.v1.Nft/GetNftDetail"
const OperationNftInTicketsWLRequest = "/api.service.v1.Nft/InTicketsWLRequest"
const OperationNftSignToLogin = "/api.service.v1.Nft/SignToLogin"

type NftHTTPServer interface {
	FetchNonce(context.Context, *v11.FetchSignMessageRequest) (*v11.FetchSignMessageResponse, error)
	GetAddressNfts(context.Context, *v12.GetAddressNftsRequest) (*v12.GetAddressNftResponse, error)
	GetNftDetail(context.Context, *v12.GetNftDetailRequest) (*v12.GetNftDetailResponse, error)
	InTicketsWLRequest(context.Context, *v1.CanMintRequest) (*v1.CantMintResponse, error)
	SignToLogin(context.Context, *v11.VerifySignToLoginSignRequest) (*v11.VerifySignToLoginSighResponse, error)
}

func RegisterNftHTTPServer(s *http.Server, srv NftHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/tickets/{address}/can_mint", _Nft_InTicketsWLRequest0_HTTP_Handler(srv))
	r.POST("/v1/address/verify_sign", _Nft_SignToLogin0_HTTP_Handler(srv))
	r.GET("/v1/address/{address}/sign_message", _Nft_FetchNonce0_HTTP_Handler(srv))
	r.GET("/v1/address/{address}/nfts", _Nft_GetAddressNfts0_HTTP_Handler(srv))
	r.GET("/v1/nft/collection/{contract_address}/token/{token_id}", _Nft_GetNftDetail0_HTTP_Handler(srv))
}

func _Nft_InTicketsWLRequest0_HTTP_Handler(srv NftHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.CanMintRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftInTicketsWLRequest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InTicketsWLRequest(ctx, req.(*v1.CanMintRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.CantMintResponse)
		return ctx.Result(200, reply)
	}
}

func _Nft_SignToLogin0_HTTP_Handler(srv NftHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.VerifySignToLoginSignRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftSignToLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SignToLogin(ctx, req.(*v11.VerifySignToLoginSignRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.VerifySignToLoginSighResponse)
		return ctx.Result(200, reply)
	}
}

func _Nft_FetchNonce0_HTTP_Handler(srv NftHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.FetchSignMessageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftFetchNonce)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FetchNonce(ctx, req.(*v11.FetchSignMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.FetchSignMessageResponse)
		return ctx.Result(200, reply)
	}
}

func _Nft_GetAddressNfts0_HTTP_Handler(srv NftHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v12.GetAddressNftsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftGetAddressNfts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAddressNfts(ctx, req.(*v12.GetAddressNftsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v12.GetAddressNftResponse)
		return ctx.Result(200, reply)
	}
}

func _Nft_GetNftDetail0_HTTP_Handler(srv NftHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v12.GetNftDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftGetNftDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNftDetail(ctx, req.(*v12.GetNftDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v12.GetNftDetailResponse)
		return ctx.Result(200, reply)
	}
}

type NftHTTPClient interface {
	FetchNonce(ctx context.Context, req *v11.FetchSignMessageRequest, opts ...http.CallOption) (rsp *v11.FetchSignMessageResponse, err error)
	GetAddressNfts(ctx context.Context, req *v12.GetAddressNftsRequest, opts ...http.CallOption) (rsp *v12.GetAddressNftResponse, err error)
	GetNftDetail(ctx context.Context, req *v12.GetNftDetailRequest, opts ...http.CallOption) (rsp *v12.GetNftDetailResponse, err error)
	InTicketsWLRequest(ctx context.Context, req *v1.CanMintRequest, opts ...http.CallOption) (rsp *v1.CantMintResponse, err error)
	SignToLogin(ctx context.Context, req *v11.VerifySignToLoginSignRequest, opts ...http.CallOption) (rsp *v11.VerifySignToLoginSighResponse, err error)
}

type NftHTTPClientImpl struct {
	cc *http.Client
}

func NewNftHTTPClient(client *http.Client) NftHTTPClient {
	return &NftHTTPClientImpl{client}
}

func (c *NftHTTPClientImpl) FetchNonce(ctx context.Context, in *v11.FetchSignMessageRequest, opts ...http.CallOption) (*v11.FetchSignMessageResponse, error) {
	var out v11.FetchSignMessageResponse
	pattern := "/v1/address/{address}/sign_message"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNftFetchNonce))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftHTTPClientImpl) GetAddressNfts(ctx context.Context, in *v12.GetAddressNftsRequest, opts ...http.CallOption) (*v12.GetAddressNftResponse, error) {
	var out v12.GetAddressNftResponse
	pattern := "/v1/address/{address}/nfts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNftGetAddressNfts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftHTTPClientImpl) GetNftDetail(ctx context.Context, in *v12.GetNftDetailRequest, opts ...http.CallOption) (*v12.GetNftDetailResponse, error) {
	var out v12.GetNftDetailResponse
	pattern := "/v1/nft/collection/{contract_address}/token/{token_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNftGetNftDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftHTTPClientImpl) InTicketsWLRequest(ctx context.Context, in *v1.CanMintRequest, opts ...http.CallOption) (*v1.CantMintResponse, error) {
	var out v1.CantMintResponse
	pattern := "/v1/tickets/{address}/can_mint"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNftInTicketsWLRequest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftHTTPClientImpl) SignToLogin(ctx context.Context, in *v11.VerifySignToLoginSignRequest, opts ...http.CallOption) (*v11.VerifySignToLoginSighResponse, error) {
	var out v11.VerifySignToLoginSighResponse
	pattern := "/v1/address/verify_sign"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNftSignToLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
