// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.0
// - protoc             v3.19.4
// source: api/service/v1/service.proto

package v1

import (
	v12 "4clabs-server/api/auth/v1"
	v1 "4clabs-server/api/nft/v1"
	v13 "4clabs-server/api/script/v1"
	v11 "4clabs-server/api/tickets/v1"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNftCreateComic = "/api.service.v1.Nft/CreateComic"
const OperationNftFetchNonce = "/api.service.v1.Nft/FetchNonce"
const OperationNftGetAddressNfts = "/api.service.v1.Nft/GetAddressNfts"
const OperationNftGetComicNftById = "/api.service.v1.Nft/GetComicNftById"
const OperationNftGetComicNftList = "/api.service.v1.Nft/GetComicNftList"
const OperationNftGetNftDetail = "/api.service.v1.Nft/GetNftDetail"
const OperationNftInTicketsWLRequest = "/api.service.v1.Nft/InTicketsWLRequest"
const OperationNftListComicWorks = "/api.service.v1.Nft/ListComicWorks"
const OperationNftListRegsiterNfts = "/api.service.v1.Nft/ListRegsiterNfts"
const OperationNftNftPurchase = "/api.service.v1.Nft/NftPurchase"
const OperationNftRegisterNft = "/api.service.v1.Nft/RegisterNft"
const OperationNftScriptRegisterUpdate = "/api.service.v1.Nft/ScriptRegisterUpdate"
const OperationNftSignToLogin = "/api.service.v1.Nft/SignToLogin"

type NftHTTPServer interface {
	CreateComic(context.Context, *v1.ComicCreateRequest) (*v1.ComicCreateResponse, error)
	FetchNonce(context.Context, *v12.FetchSignMessageRequest) (*v12.FetchSignMessageResponse, error)
	GetAddressNfts(context.Context, *v1.GetAddressNftsRequest) (*v1.GetAddressNftResponse, error)
	GetComicNftById(context.Context, *v1.ListComicNftByComicRequest) (*v1.ListComicNftByComicResponse, error)
	GetComicNftList(context.Context, *v1.ListComicNftRequest) (*v1.ListComicNftResponse, error)
	GetNftDetail(context.Context, *v1.GetNftDetailRequest) (*v1.GetNftDetailResponse, error)
	InTicketsWLRequest(context.Context, *v11.CanMintRequest) (*v11.CantMintResponse, error)
	ListComicWorks(context.Context, *v1.ListComicWorkRequest) (*v1.ListComicWorkResponse, error)
	ListRegsiterNfts(context.Context, *v1.ListRegisterNftRequest) (*v1.ListRegisterNftResponse, error)
	NftPurchase(context.Context, *v1.PurchaseComicNftRequest) (*v1.PurchaseComicNftResponse, error)
	RegisterNft(context.Context, *v1.RegisterNftRequest) (*v1.RegisterNftResponse, error)
	ScriptRegisterUpdate(context.Context, *v13.ScriptRegisterRequest) (*v13.ScriptRegisterResponse, error)
	SignToLogin(context.Context, *v12.VerifySignToLoginSignRequest) (*v12.VerifySignToLoginSighResponse, error)
}

func RegisterNftHTTPServer(s *http.Server, srv NftHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/{address}/comic/list", _Nft_ListComicWorks0_HTTP_Handler(srv))
	r.POST("/v1/comic/create", _Nft_CreateComic0_HTTP_Handler(srv))
	r.POST("/v1/nft/register", _Nft_RegisterNft0_HTTP_Handler(srv))
	r.GET("/v1/nft/registers", _Nft_ListRegsiterNfts0_HTTP_Handler(srv))
	r.GET("/v1/tickets/{address}/can_mint", _Nft_InTicketsWLRequest0_HTTP_Handler(srv))
	r.POST("/v1/address/verify_sign", _Nft_SignToLogin0_HTTP_Handler(srv))
	r.GET("/v1/address/{address}/sign_message", _Nft_FetchNonce0_HTTP_Handler(srv))
	r.GET("/v1/address/{address}/nfts", _Nft_GetAddressNfts0_HTTP_Handler(srv))
	r.GET("/v1/nft/collection/{contract_address}/token/{token_id}", _Nft_GetNftDetail0_HTTP_Handler(srv))
	r.GET("/v1/comic/nft/list", _Nft_GetComicNftList0_HTTP_Handler(srv))
	r.GET("/v1/comic/{comic_id}/nft/list", _Nft_GetComicNftById0_HTTP_Handler(srv))
	r.POST("/v1/comic/nft/purchase", _Nft_NftPurchase0_HTTP_Handler(srv))
	r.POST("/v1/script/register/update", _Nft_ScriptRegisterUpdate0_HTTP_Handler(srv))
}

func _Nft_ListComicWorks0_HTTP_Handler(srv NftHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListComicWorkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftListComicWorks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListComicWorks(ctx, req.(*v1.ListComicWorkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListComicWorkResponse)
		return ctx.Result(200, reply)
	}
}

func _Nft_CreateComic0_HTTP_Handler(srv NftHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ComicCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftCreateComic)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateComic(ctx, req.(*v1.ComicCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ComicCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _Nft_RegisterNft0_HTTP_Handler(srv NftHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.RegisterNftRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftRegisterNft)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterNft(ctx, req.(*v1.RegisterNftRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.RegisterNftResponse)
		return ctx.Result(200, reply)
	}
}

func _Nft_ListRegsiterNfts0_HTTP_Handler(srv NftHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListRegisterNftRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftListRegsiterNfts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRegsiterNfts(ctx, req.(*v1.ListRegisterNftRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListRegisterNftResponse)
		return ctx.Result(200, reply)
	}
}

func _Nft_InTicketsWLRequest0_HTTP_Handler(srv NftHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v11.CanMintRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftInTicketsWLRequest)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InTicketsWLRequest(ctx, req.(*v11.CanMintRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v11.CantMintResponse)
		return ctx.Result(200, reply)
	}
}

func _Nft_SignToLogin0_HTTP_Handler(srv NftHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v12.VerifySignToLoginSignRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftSignToLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SignToLogin(ctx, req.(*v12.VerifySignToLoginSignRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v12.VerifySignToLoginSighResponse)
		return ctx.Result(200, reply)
	}
}

func _Nft_FetchNonce0_HTTP_Handler(srv NftHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v12.FetchSignMessageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftFetchNonce)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FetchNonce(ctx, req.(*v12.FetchSignMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v12.FetchSignMessageResponse)
		return ctx.Result(200, reply)
	}
}

func _Nft_GetAddressNfts0_HTTP_Handler(srv NftHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetAddressNftsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftGetAddressNfts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAddressNfts(ctx, req.(*v1.GetAddressNftsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetAddressNftResponse)
		return ctx.Result(200, reply)
	}
}

func _Nft_GetNftDetail0_HTTP_Handler(srv NftHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetNftDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftGetNftDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNftDetail(ctx, req.(*v1.GetNftDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetNftDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _Nft_GetComicNftList0_HTTP_Handler(srv NftHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListComicNftRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftGetComicNftList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetComicNftList(ctx, req.(*v1.ListComicNftRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListComicNftResponse)
		return ctx.Result(200, reply)
	}
}

func _Nft_GetComicNftById0_HTTP_Handler(srv NftHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListComicNftByComicRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftGetComicNftById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetComicNftById(ctx, req.(*v1.ListComicNftByComicRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListComicNftByComicResponse)
		return ctx.Result(200, reply)
	}
}

func _Nft_NftPurchase0_HTTP_Handler(srv NftHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.PurchaseComicNftRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftNftPurchase)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.NftPurchase(ctx, req.(*v1.PurchaseComicNftRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.PurchaseComicNftResponse)
		return ctx.Result(200, reply)
	}
}

func _Nft_ScriptRegisterUpdate0_HTTP_Handler(srv NftHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v13.ScriptRegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNftScriptRegisterUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ScriptRegisterUpdate(ctx, req.(*v13.ScriptRegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v13.ScriptRegisterResponse)
		return ctx.Result(200, reply)
	}
}

type NftHTTPClient interface {
	CreateComic(ctx context.Context, req *v1.ComicCreateRequest, opts ...http.CallOption) (rsp *v1.ComicCreateResponse, err error)
	FetchNonce(ctx context.Context, req *v12.FetchSignMessageRequest, opts ...http.CallOption) (rsp *v12.FetchSignMessageResponse, err error)
	GetAddressNfts(ctx context.Context, req *v1.GetAddressNftsRequest, opts ...http.CallOption) (rsp *v1.GetAddressNftResponse, err error)
	GetComicNftById(ctx context.Context, req *v1.ListComicNftByComicRequest, opts ...http.CallOption) (rsp *v1.ListComicNftByComicResponse, err error)
	GetComicNftList(ctx context.Context, req *v1.ListComicNftRequest, opts ...http.CallOption) (rsp *v1.ListComicNftResponse, err error)
	GetNftDetail(ctx context.Context, req *v1.GetNftDetailRequest, opts ...http.CallOption) (rsp *v1.GetNftDetailResponse, err error)
	InTicketsWLRequest(ctx context.Context, req *v11.CanMintRequest, opts ...http.CallOption) (rsp *v11.CantMintResponse, err error)
	ListComicWorks(ctx context.Context, req *v1.ListComicWorkRequest, opts ...http.CallOption) (rsp *v1.ListComicWorkResponse, err error)
	ListRegsiterNfts(ctx context.Context, req *v1.ListRegisterNftRequest, opts ...http.CallOption) (rsp *v1.ListRegisterNftResponse, err error)
	NftPurchase(ctx context.Context, req *v1.PurchaseComicNftRequest, opts ...http.CallOption) (rsp *v1.PurchaseComicNftResponse, err error)
	RegisterNft(ctx context.Context, req *v1.RegisterNftRequest, opts ...http.CallOption) (rsp *v1.RegisterNftResponse, err error)
	ScriptRegisterUpdate(ctx context.Context, req *v13.ScriptRegisterRequest, opts ...http.CallOption) (rsp *v13.ScriptRegisterResponse, err error)
	SignToLogin(ctx context.Context, req *v12.VerifySignToLoginSignRequest, opts ...http.CallOption) (rsp *v12.VerifySignToLoginSighResponse, err error)
}

type NftHTTPClientImpl struct {
	cc *http.Client
}

func NewNftHTTPClient(client *http.Client) NftHTTPClient {
	return &NftHTTPClientImpl{client}
}

func (c *NftHTTPClientImpl) CreateComic(ctx context.Context, in *v1.ComicCreateRequest, opts ...http.CallOption) (*v1.ComicCreateResponse, error) {
	var out v1.ComicCreateResponse
	pattern := "/v1/comic/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNftCreateComic))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftHTTPClientImpl) FetchNonce(ctx context.Context, in *v12.FetchSignMessageRequest, opts ...http.CallOption) (*v12.FetchSignMessageResponse, error) {
	var out v12.FetchSignMessageResponse
	pattern := "/v1/address/{address}/sign_message"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNftFetchNonce))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftHTTPClientImpl) GetAddressNfts(ctx context.Context, in *v1.GetAddressNftsRequest, opts ...http.CallOption) (*v1.GetAddressNftResponse, error) {
	var out v1.GetAddressNftResponse
	pattern := "/v1/address/{address}/nfts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNftGetAddressNfts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftHTTPClientImpl) GetComicNftById(ctx context.Context, in *v1.ListComicNftByComicRequest, opts ...http.CallOption) (*v1.ListComicNftByComicResponse, error) {
	var out v1.ListComicNftByComicResponse
	pattern := "/v1/comic/{comic_id}/nft/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNftGetComicNftById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftHTTPClientImpl) GetComicNftList(ctx context.Context, in *v1.ListComicNftRequest, opts ...http.CallOption) (*v1.ListComicNftResponse, error) {
	var out v1.ListComicNftResponse
	pattern := "/v1/comic/nft/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNftGetComicNftList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftHTTPClientImpl) GetNftDetail(ctx context.Context, in *v1.GetNftDetailRequest, opts ...http.CallOption) (*v1.GetNftDetailResponse, error) {
	var out v1.GetNftDetailResponse
	pattern := "/v1/nft/collection/{contract_address}/token/{token_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNftGetNftDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftHTTPClientImpl) InTicketsWLRequest(ctx context.Context, in *v11.CanMintRequest, opts ...http.CallOption) (*v11.CantMintResponse, error) {
	var out v11.CantMintResponse
	pattern := "/v1/tickets/{address}/can_mint"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNftInTicketsWLRequest))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftHTTPClientImpl) ListComicWorks(ctx context.Context, in *v1.ListComicWorkRequest, opts ...http.CallOption) (*v1.ListComicWorkResponse, error) {
	var out v1.ListComicWorkResponse
	pattern := "/v1/{address}/comic/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNftListComicWorks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftHTTPClientImpl) ListRegsiterNfts(ctx context.Context, in *v1.ListRegisterNftRequest, opts ...http.CallOption) (*v1.ListRegisterNftResponse, error) {
	var out v1.ListRegisterNftResponse
	pattern := "/v1/nft/registers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNftListRegsiterNfts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftHTTPClientImpl) NftPurchase(ctx context.Context, in *v1.PurchaseComicNftRequest, opts ...http.CallOption) (*v1.PurchaseComicNftResponse, error) {
	var out v1.PurchaseComicNftResponse
	pattern := "/v1/comic/nft/purchase"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNftNftPurchase))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftHTTPClientImpl) RegisterNft(ctx context.Context, in *v1.RegisterNftRequest, opts ...http.CallOption) (*v1.RegisterNftResponse, error) {
	var out v1.RegisterNftResponse
	pattern := "/v1/nft/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNftRegisterNft))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftHTTPClientImpl) ScriptRegisterUpdate(ctx context.Context, in *v13.ScriptRegisterRequest, opts ...http.CallOption) (*v13.ScriptRegisterResponse, error) {
	var out v13.ScriptRegisterResponse
	pattern := "/v1/script/register/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNftScriptRegisterUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NftHTTPClientImpl) SignToLogin(ctx context.Context, in *v12.VerifySignToLoginSignRequest, opts ...http.CallOption) (*v12.VerifySignToLoginSighResponse, error) {
	var out v12.VerifySignToLoginSighResponse
	pattern := "/v1/address/verify_sign"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNftSignToLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
