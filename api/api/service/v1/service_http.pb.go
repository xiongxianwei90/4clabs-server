// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	v1 "4clabs-server/api/nft/v1"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type NftHTTPServer interface {
	GetAddressNfts(context.Context, *v1.GetAddressNftsRequest) (*v1.GetAddressNftResponse, error)
}

func RegisterNftHTTPServer(s *http.Server, srv NftHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/address/{address}/nfts", _Nft_GetAddressNfts0_HTTP_Handler(srv))
}

func _Nft_GetAddressNfts0_HTTP_Handler(srv NftHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetAddressNftsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.service.v1.Nft/GetAddressNfts")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAddressNfts(ctx, req.(*v1.GetAddressNftsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetAddressNftResponse)
		return ctx.Result(200, reply)
	}
}

type NftHTTPClient interface {
	GetAddressNfts(ctx context.Context, req *v1.GetAddressNftsRequest, opts ...http.CallOption) (rsp *v1.GetAddressNftResponse, err error)
}

type NftHTTPClientImpl struct {
	cc *http.Client
}

func NewNftHTTPClient(client *http.Client) NftHTTPClient {
	return &NftHTTPClientImpl{client}
}

func (c *NftHTTPClientImpl) GetAddressNfts(ctx context.Context, in *v1.GetAddressNftsRequest, opts ...http.CallOption) (*v1.GetAddressNftResponse, error) {
	var out v1.GetAddressNftResponse
	pattern := "/v1/address/{address}/nfts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.service.v1.Nft/GetAddressNfts"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
